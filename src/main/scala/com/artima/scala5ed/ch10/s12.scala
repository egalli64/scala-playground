/*
  Programming in Scala, 5th Edition - source code shown in the book
  Download the zip file from: https://booksites.artima.com/programming_in_scala_5ed

  https://github.com/egalli64/scala-playground

  Composition and Inheritance - Implementing above, beside, and toString
 */
package com.artima.scala5ed.ch10

@main
def s12(): Unit =
  abstract class Element:
    def contents: Vector[String]
    def height: Int = contents.length
    def width: Int = if height == 0 then 0 else contents(0).length

    /**
     * Merge the current element with the passed one, letting "this" above "that"
     *
     * !!! Assuming each string in contents having the same length !!!
     *
     * @param that
     *   another element
     * @return
     *   the two elements merged
     */
    def above(that: Element): Element =
      VectorElement(this.contents ++ that.contents)

    /**
     * Merge the current element with the passed one, letting "this" on the left of "that"
     *
     * !!! Assuming contents having the same length !!!
     *
     * @param that
     *   another element
     * @return
     *   the two elements merged
     */
    def imperativeBeside(that: Element): Element =
      // the number of strings in the Element won't change
      val buffer = new Array[String](this.contents.length)
      // each string in contents is generated by concatenation from this and that ones
      for i <- this.contents.indices do buffer(i) = this.contents(i) + that.contents(i)
      VectorElement(buffer.toVector)

    /**
     * Merge the current element with the passed one (more functional)
     *
     * !!! Assuming contents having the same length !!!
     *
     * @param that
     *   another element
     * @return
     *   the two elements merged
     */
    def beside(that: Element): Element =
      VectorElement(for (left, right) <- this.contents.zip(that.contents) yield left + right)

    override def toString: String = contents.mkString("\n")

  class VectorElement(val contents: Vector[String]) extends Element

  val ve = VectorElement(Vector("Hello"))
  println(s"${ve.contents}, ${ve.width}")

  val ve2 = VectorElement(Vector("Goodbye"))
  println(s"${ve2.contents}, ${ve2.width}")

  println("Above:\n" + ve.above(ve2))
  println("Beside (imperative): " + ve.imperativeBeside(ve2))
  println("Beside: " + ve.beside(ve2))
